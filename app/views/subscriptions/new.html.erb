<div class="container">
  <div class="page-header">
    <h1>New Subscription</h1>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <input type="text" id="quicksearch" placeholder="Search Artists (start typing)" class="form-control">
    </div>
  </div>
  <hr>
    </br>
  <div class="row isotope-container">
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 isotope-item">
      <div class="panel panel-default">

        <div class="panel-body">

          <%= form_for(@subscription, html: {class: 'form-horizontal'}) do |f| %>

          <%= render "shared/error_messages", resource: @subscription  %>

          <div>
          <%= @artist.name %>
          </div>

          <div>
          <%= image_tag "#{@artist.picture_url}" %>
          </div>
          <hr>

          <div>
            <%= f.hidden_field :user_id %>
            <%= hidden_field_tag 'selected', 'none'  %>
          </div>
          <div class="form-group">
            <%= f.label :artist_id, class: "control-label" %>
          </div>
          <div class="btn-group btn-group-justified">
            <% if subscription.present? %>
            <%= link_to "Unsubscribe", subscription, :method => "delete", :class => "btn btn-default" %>
            <% else %>
            <%= link_to "Subscribe", subscription_url(:subscription => { :artist_id => artist.id }), :method => "post", :class => "btn btn-default" %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%= link_to 'Back', subscriptions_path, :class => "btn btn-primary" %>

</div>

<!-- JavaScript for Isotope layout and quicksearch -->
<script>
  $(function() {
    // quick search regex
    var qsRegex;

    // init Isotope
    var $container = $('.isotope-container').isotope({
      itemSelector: '.isotope-item',
      layoutMode: 'masonry',
      filter: function() {
        return qsRegex ? $(this).text().match( qsRegex ) : true;
      }
    });

    // use value of search field to filter
    var $quicksearch = $('#quicksearch').keyup( debounce( function() {
      qsRegex = new RegExp( $quicksearch.val(), 'gi' );
      $container.isotope();
    }, 200 ) );

  });

  // debounce so filtering doesn't happen every millisecond
  function debounce( fn, threshold ) {
    var timeout;
    return function debounced() {
      if ( timeout ) {
        clearTimeout( timeout );
      }
      function delayed() {
        fn();
        timeout = null;
      }
      timeout = setTimeout( delayed, threshold || 100 );
    }
  }
</script>
<% end %>

<!-- End responsive, Isotope-based layout example -->
